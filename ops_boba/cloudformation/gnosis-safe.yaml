# TODO
# - update DJANGO_SECRET_KEY
# - update WEBHOOK_TOKEN
# - after Rinkeby validation set DEBUG flags to false
# - potentially limit DJANGO_ALLOWED_HOSTS
# - safe_client_gateway=debug,safe_client_gateway::monitoring=info set to safe_client_gateway=normal,safe_client_gateway::monitoring=info
# - safe config service can use DEFAULT_FILE_STORAGE S3Boto3Storage - # django-storages â€“ Amazon S3 configuration See https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Gnosis-Safe Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: v0.0.4

  DockerPrefix:
    Type: String
    Default: bobanetwork

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: rinkeby-infrastructure-core

Conditions:
  IsProduction:
    !Equals [!Ref EnvironmentName, "production"]

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "s3:*"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
        - PolicyName: AllowAccessToSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:Describe*"
                  - "cloudwatch:Get*"
                  - "cloudwatch:List*"
                  - "logs:TestMetricFilter"
                  - "logs:PutSubscriptionFilter"
                  - "logs:DeleteSubscriptionFilter"
                  - "logs:DescribeSubscriptionFilters"
                  - "support:*"
                  - "tag:GetResources"
                  - "tag:GetTagKeys"
                  - "tag:GetTagValues"
                Resource: "*"

  GnosisLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBTargetGroup3:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3666
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBTargetGroup4:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  # GnosisLBTargetGroup5:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Port: 8080
  #     Protocol: TCP
  #     VpcId:
  #       Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
  #     TargetGroupAttributes:
  #       - Key: deregistration_delay.timeout_seconds
  #         Value: 30
  #     HealthCheckProtocol: TCP
  #     HealthCheckPort: "traffic-port"
  #     TargetType: "ip"

  # GnosisLBTargetGroup6:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Port: 8888
  #     Protocol: TCP
  #     VpcId:
  #       Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
  #     TargetGroupAttributes:
  #       - Key: deregistration_delay.timeout_seconds
  #         Value: 30
  #     HealthCheckProtocol: TCP
  #     HealthCheckPort: "traffic-port"
  #     TargetType: "ip"

  GnosisListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:ARN"
      Port: 80
      Protocol: TCP
      # Certificates:
      # - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup

  GnosisListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisTransaction:ARN"
      Port: 8000
      Protocol: TCP
      # Certificates:
      # - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup2

  GnosisListener3:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisGateway:ARN"
      Port: 443
      Protocol: TLS
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup3

  GnosisListener4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisReact:ARN"
      Port: 443
      Protocol: TLS
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup4

  # GnosisListener5:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn:
  #       Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisConfig:ARN"
  #     Port: 443
  #     Protocol: TLS
  #     Certificates:
  #     - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
  #     DefaultActions:
  #     - Type: forward
  #       TargetGroupArn: !Ref GnosisLBTargetGroup5

  # GnosisListener6:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn:
  #       Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisConfig:ARN"
  #     Port: 443
  #     Protocol: TLS
  #     Certificates:
  #     - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
  #     DefaultActions:
  #     - Type: forward
  #       TargetGroupArn: !Ref GnosisLBTargetGroup6

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: docker_sock
          Host:
            SourcePath: "/var/run/docker.sock"
        - Name: docker_logs
          Host:
            SourcePath: "/var/lib/docker/containers"
        - Name: docker_run
          Host:
            SourcePath: "/opt/datadog-agent/run"
        - Name: proc
          Host:
            SourcePath: "/proc/"
        - Name: cgroup
          Host:
            SourcePath: "/sys/fs/cgroup/"
        - Name: password
          Host:
            SourcePath: "/etc/passwd"
        - Name: nginx
          Host:
            SourcePath: "/mnt/nginx"
        - Name: nginx2
          Host:
            SourcePath: "/mnt/nginx2"
      ContainerDefinitions:
        - Image: datadog/agent:latest
          Name: datadog
          Environment:
            - Name: DD_SITE
              Value: "datadoghq.com"
            - Name: DD_PROCESS_AGENT_ENABLED
              Value: "true"
            - Name: DD_LOGS_ENABLED
              Value: "true"
            - Name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              Value: "true"
            - Name: DD_LOGS_CONFIG_DOCKER_CONTAINER_USE_FILE
              Value: "true"
            - Name: DD_CONTAINER_EXCLUDE
              Value: "name:datadog-agent"
            - Name: DD_CONTAINER_EXCLUDE
              Value: "name:amazon-ecs-agent"
            - Name: DD_API_KEY
              Value: ""
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/datadog.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          MountPoints:
            - ContainerPath: "/var/run/docker.sock"
              SourceVolume: docker_sock
            - ContainerPath: "/host/sys/fs/cgroup"
              SourceVolume: cgroup
            - ContainerPath: "/host/proc"
              SourceVolume: proc
            - ContainerPath: "/opt/datadog-agent/run"
              SourceVolume: docker_run
            - ContainerPath: "/var/lib/docker/containers"
              SourceVolume: docker_logs
          Essential: true
          Memory: "256"
          Cpu: "10"
        - Image: !Sub "${DockerPrefix}/nginx-safe-transaction-service:latest"
          Name: nginx-safe-transaction-service
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx
          DockerLabels:
            com.datadoghq.ad.check_names: '["nginx-safe-transaction-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "nginx-safe-transaction-service", "service": "nginx-safe-transaction-service"}]'
          Essential: true
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/nginx-safe-config-service:latest"
          Name: nginx-safe-config-service
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx2
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: PYTHONDONTWRITEBYTECODE
              Value: true
            - Name: DEBUG
              Value: true
            - Name: ROOT_LOG_LEVEL
              Value: DEBUG
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - ".localhost,127.0.0.1,[::1],*,safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: GUNICORN_BIND_PORT
              Value: 80
            - Name: DOCKER_NGINX_VOLUME_ROOT
              Value: /nginx
            - Name: GUNICORN_BIND_SOCKET
              Value: unix:////nginx/gunicorn.socket
            - Name: NGINX_HOST_PORT
              Value: 80
            - Name: NGINX_ENVSUBST_OUTPUT_DIR
              Value: /etc/nginx/
            - Name: GUNICORN_WEB_RELOAD
              Value: false
            - Name: CGW_URL
              Value: !Sub
                - "https://safe-client.${EndpointAddress}/"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:DNSName"
            - Name: DEFAULT_FILE_STORAGE
              Value: django.core.files.storage.FileSystemStorage
          DockerLabels:
            com.datadoghq.ad.check_names: '["nginx-safe-config-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "nginx-safe-config-service", "service": "nginx-safe-config-service"}]'
          Essential: false
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-transaction-service:${ImageTag}"
          Name: safe-transaction-service
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 8888
              HostPort: 8888
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: ETH_L2_NETWORK
              Value: 1
            - Name: PYTHONPATH
              Value: /app/
            - Name: DJANGO_SETTINGS_MODULE
              Value: config.settings.production
            - Name: C_FORCE_ROOT
              Value: true
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - ".localhost,127.0.0.1,[::1],*,safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_TRACING_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: REDIS_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/0"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: CELERY_BROKER_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/1"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
          Command:
            - "./docker/web/run_web.sh"
          DockerLabels:
            com.datadoghq.ad.check_names: '["safe-transaction-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "safe-transaction-service", "service": "safe-transaction-service"}]'
          Essential: false
          Memory: "1024"
        # - Image: !Sub "${DockerPrefix}/safe-transaction-service:${ImageTag}"
        #   Name: worker
        #   Ulimits:
        #     - Name: nofile
        #       SoftLimit: 65536
        #       HardLimit: 65536
        #     - Name: nproc
        #       SoftLimit: 65536
        #       HardLimit: 65536
        #     - Name: core
        #       SoftLimit: 0
        #       HardLimit: 0
        #   EnvironmentFiles:
        #     - Value: !Sub
        #       - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
        #       - S3BucketV2:
        #           Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
        #       Type: "s3"
        #   Environment:
        #     - Name: ETH_L2_NETWORK
        #       Value: 1
        #     - Name: PYTHONPATH
        #       Value: /app/
        #     - Name: DJANGO_SETTINGS_MODULE
        #       Value: config.settings.production
        #     - Name: C_FORCE_ROOT
        #       Value: true
        #     - Name: DJANGO_ALLOWED_HOSTS
        #       Value: !Sub
        #         - ".localhost,127.0.0.1,[::1],*,safe-client-gateway,safe-client.${EndpointAddress}"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
        #     - Name: ETHEREUM_NODE_URL
        #       Value: !Sub
        #         - "https://${EndpointAddress}"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
        #     - Name: ETHEREUM_TRACING_NODE_URL
        #       Value: !Sub
        #         - "https://${EndpointAddress}"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
        #     - Name: REDIS_URL
        #       Value: !Sub
        #         - "redis://${EndpointAddress}:6379/0"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
        #     - Name: CELERY_BROKER_URL
        #       Value: !Sub
        #         - "redis://${EndpointAddress}:6379/1"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
        #   Command:
        #     - "./docker/web/celery/worker/run.sh"
        #   DockerLabels:
        #     com.datadoghq.ad.check_names: '["worker"]'
        #     com.datadoghq.ad.init_configs: '[{}]'
        #     com.datadoghq.ad.logs: '[{"source": "worker", "service": "worker"}]'
        #   Essential: false
        #   Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-transaction-service:${ImageTag}"
          Name: scheduler
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: ETH_L2_NETWORK
              Value: 1
            - Name: PYTHONPATH
              Value: /app/
            - Name: DJANGO_SETTINGS_MODULE
              Value: config.settings.production
            - Name: C_FORCE_ROOT
              Value: true
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - ".localhost,127.0.0.1,[::1],*,safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_TRACING_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: REDIS_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/0"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: CELERY_BROKER_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/1"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
          Command:
            - "./docker/web/celery/scheduler/run.sh"
          DockerLabels:
            com.datadoghq.ad.check_names: '["worker"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "worker", "service": "worker"}]'
          Essential: false
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-client-gateway:${ImageTag}"
          Name: safe-client-gateway
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 3666
              HostPort: 3666
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: CONFIG_SERVICE_URI
              Value: !Sub
                - "https://safe-config.${EndpointAddress}/"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: FEATURE_FLAG_NESTED_DECODING
              Value: true
            - Name: FEATURE_FLAG_BALANCES_RATE_IMPLEMENTATION
              Value: false
            - Name: SCHEME
              Value: http
            - Name: ROCKET_LOG_LEVEL
              Value: debug
            - Name: RUST_BACKTRACE
              Value: 1
            - Name: RUST_LOG
              Value: safe_client_gateway=debug,safe_client_gateway::monitoring=info
            - Name: LOG_ALL_ERROR_RESPONSES
              Value: true
            - Name: VPC_TRANSACTION_SERVICE_URI
              Value: true
            - Name: CONCURRENT_BALANCE_TOKEN_REQUESTS
              Value: 5
            - Name: INTERNAL_CLIENT_CONNECT_TIMEOUT
              Value: 10000
            - Name: SAFE_APP_INFO_REQUEST_TIMEOUT
              Value: 10000
            - Name: CHAIN_INFO_REQUEST_TIMEOUT
              Value: 15000
            - Name: EXCHANGE_API_BASE_URI
              Value: http://api.exchangeratesapi.io/latest
            - Name: REDIS_URI
              Value: !Sub
                - "redis://${EndpointAddress}:6379"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: ROCKET_PORT
              Value: 3666
            - Name: ROCKET_ADDRESS
              Value: 0.0.0.0
          DockerLabels:
            com.datadoghq.ad.check_names: '["safe-client-gateway"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "safe-client-gateway", "service": "safe-client-gateway"}]'
          Essential: true
          Memory: "4000"
        # - Image: !Sub "${DockerPrefix}/safe-config-service:${ImageTag}"
        #   Name: safe-config-service
        #   Ulimits:
        #     - Name: nofile
        #       SoftLimit: 65536
        #       HardLimit: 65536
        #     - Name: nproc
        #       SoftLimit: 65536
        #       HardLimit: 65536
        #     - Name: core
        #       SoftLimit: 0
        #       HardLimit: 0
        #   PortMappings:
        #     - ContainerPort: 8080
        #       HostPort: 8080
        #   MountPoints:
        #     - ContainerPath: "/nginx"
        #       SourceVolume: nginx2
        #   EnvironmentFiles:
        #     - Value: !Sub
        #       - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
        #       - S3BucketV2:
        #           Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
        #       Type: "s3"
        #   Environment:
        #     - Name: PYTHONDONTWRITEBYTECODE
        #       Value: true
        #     - Name: DEBUG
        #       Value: true
        #     - Name: ROOT_LOG_LEVEL
        #       Value: DEBUG
        #     - Name: DJANGO_ALLOWED_HOSTS
        #       Value: !Sub
        #         - ".localhost,127.0.0.1,[::1],*,safe-client-gateway,safe-client.${EndpointAddress}"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
        #     - Name: GUNICORN_BIND_PORT
        #       Value: 8080
        #     - Name: DOCKER_NGINX_VOLUME_ROOT
        #       Value: /nginx
        #     - Name: GUNICORN_BIND_SOCKET
        #       Value: unix:////nginx/gunicorn.socket
        #     - Name: NGINX_HOST_PORT
        #       Value: 80
        #     - Name: NGINX_ENVSUBST_OUTPUT_DIR
        #       Value: /etc/nginx/
        #     - Name: GUNICORN_WEB_RELOAD
        #       Value: false
        #     - Name: CGW_URL
        #       Value: !Sub
        #         - "https://safe-client.${EndpointAddress}/"
        #         - EndpointAddress:
        #             Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
        #     - Name: DEFAULT_FILE_STORAGE
        #       Value: django.core.files.storage.FileSystemStorage
        #   PseudoTerminal: true
        #   Interactive: true
        #   DependsOn:
        #     - Condition: START
        #       ContainerName: nginx-safe-config-service
        #   DockerLabels:
        #     com.datadoghq.ad.check_names: '["safe-config-service"]'
        #     com.datadoghq.ad.init_configs: '[{}]'
        #     com.datadoghq.ad.logs: '[{"source": "safe-config-service", "service": "safe-config-service"}]'
        #   Essential: false
        #   Memory: "2000"
        - Image: !Sub "${DockerPrefix}/safe-react:${ImageTag}"
          Name: safe-react
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: REACT_APP_NETWORK
              Value: BOBA_RINKEBY
            - Name: NODE_ENV
              Value: production
          DockerLabels:
            com.datadoghq.ad.check_names: '["safe-react"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "safe-react", "service": "safe-react"}]'
          Essential: false
          Memory: "6000"
          Cpu: 3
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      Family: !Sub "Gnosis-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterGnosis"
      LoadBalancers:
        - ContainerName: nginx-safe-config-service
          ContainerPort: 80
          TargetGroupArn: !Ref GnosisLBTargetGroup
        - ContainerName: nginx-safe-transaction-service
          ContainerPort: 8000
          TargetGroupArn: !Ref GnosisLBTargetGroup2
        - ContainerName: safe-client-gateway
          ContainerPort: 3666
          TargetGroupArn: !Ref GnosisLBTargetGroup3
        - ContainerName: safe-react
          ContainerPort: 3000
          TargetGroupArn: !Ref GnosisLBTargetGroup4
        # - ContainerName: safe-config-service
        #   ContainerPort: 8080
        #   TargetGroupArn: !Ref GnosisLBTargetGroup5
        # - ContainerName: safe-transaction-service
        #   ContainerPort: 8888
        #   TargetGroupArn: !Ref GnosisLBTargetGroup6
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:SecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet2"
      HealthCheckGracePeriodSeconds: 300
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "gnosis-safe"
      TaskDefinition: !Ref TaskDefinition
